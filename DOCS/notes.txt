Picture format

Picture file format:
Header:
  - 4 bytes - "DPTM"
  - 2 bytes - x resolution
  - 2 bytes - y resolution
  - 1 bytes - category:
              0 - uncategorized
              1 - miscellaneous
              2 - landscape
              3 - animal
              4 - fantasy
              5 - abstract
              7 - pattern
              >7 - unknown.  Newer versions may have category values >7
  - 32 bytes - picture name.  Shown on gallery, not on in-progress work
  - 1 byte  - number of colors in the palette (1-64)
  - 1 byte  - compression type:
              0 - uncompressed
              1 - run length encoded
  - 192 bytes - color palette (64 sets of ASCII character, FG, BG).  If there are 
                fewer than 64 colors, extra colors should be set to 0, 0, 0
  - 1 byte    - does this image have transparency data?  If so, it will be at the 
                end of the file, after the image data 
  - 2 bytes - the number of playable squares in this v2 picture
  - 18 bytes - padding to bring the total to 256 bytes

Data:
  - an (x * y) grid of image data, read from left to right, top to bottom.  The data
    itself can be run length encoded.  If the upper two bits are 00, then the lower six
    bits specify the color number of the location.  If the uppermost bit is 1,
    then the next byte specifies the number of times to repeat the color
    and the lower six bits of the first byte specifies the color number.  Runs of up
    to 255 can be created.
    
    Example:
    00110000 - 1 square of color 48
    00100000 00001000 - 1 square of color 32, 1 square of color 8
    11010000 00001100 - 12 squares of color 16
Transparency data:
  - an (x * y) grid of data, read from left to right, top to bottom.  If the value is
    0, then that location will have no number assigned on the image, and therefore will
    not be drawable.  If set to 1, the location will work as it did in previous
    versions of the file.  This data is run length encoded in the same method as the
    image data, in the same circumstances (i.e. if the image data is run length encoded,
    so is the transparency data)

Code to generate the title screen

   // if (g_globals.render.title) {
    //     // border
    //     hline_at(0, 0, 80, 177, make_attr(COLOR_CYAN, COLOR_LIGHT_CYAN));
    //     hline_at(0, 24, 80, 177, make_attr(COLOR_CYAN, COLOR_LIGHT_CYAN));
    //     vline_at(0, 0, 25, 177, make_attr(COLOR_CYAN, COLOR_LIGHT_CYAN));
    //     vline_at(79, 0, 80, 177, make_attr(COLOR_CYAN, COLOR_LIGHT_CYAN));
    //     // main background
    //     fill_box_at(1, 1, 78, 23, 177, make_attr(COLOR_BLUE, COLOR_LIGHT_BLUE));
    //     // shading
    //     hline_at(7, 18, 68, 177, make_attr(COLOR_BLUE, COLOR_BLACK));
    //     hline_at(7, 22, 68, 177, make_attr(COLOR_BLUE, COLOR_BLACK));
    //     vline_at(74, 3, 16, 177, make_attr(COLOR_BLUE, COLOR_BLACK));
    //     char_at(74, 21, 177, make_attr(COLOR_BLUE, COLOR_BLACK));
    //     char_at(74, 22, 177, make_attr(COLOR_BLUE, COLOR_BLACK));
    //     // top box
    //     box_at(6, 2, 73, 17, BORDER_SINGLE, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     fill_box_at(7, 3, 72, 16, ' ', make_attr(COLOR_WHITE, COLOR_BLACK));
    //     // bottom box
    //     fill_box_at(6, 20, 73, 21, ' ', make_attr(COLOR_WHITE, COLOR_BLACK));
    //     // ASCII text lines
    //     string_at(14, 20, "Copyright 2024 Shaun Brandt / Holy Meatgoat Software", make_attr(COLOR_CYAN, COLOR_BLACK));
    //     string_at(29, 21, "Press ENTER to play!", make_attr(COLOR_WHITE, COLOR_BLACK));
    //     string_at(26, 15, "---=== ASCII Edition! ===---", make_attr(COLOR_WHITE, COLOR_BLACK));
    //     // Corner bits
    //     char_at(6, 2, 201, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     char_at(73, 2, 187, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     char_at(6, 17, 200, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     char_at(73, 17, 188, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     hline_at(7, 2, 3, 205, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     hline_at(70, 2, 3, 205, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     hline_at(7, 17, 3, 205, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     hline_at(70, 17, 3, 205, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     vline_at(6, 3, 2, 186, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     vline_at(73, 3, 2, 186, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     vline_at(6, 15, 2, 186, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     vline_at(73, 15, 2, 186, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     vline_at(6, 8, 4, 179, make_attr(COLOR_WHITE, COLOR_BLACK));
    //     vline_at(73, 8, 4, 179, make_attr(COLOR_WHITE, COLOR_BLACK));
    //     // Rainbow bars
    //     hline_at(13, 4, 7, 219, make_attr(COLOR_RED, COLOR_BLACK));
    //     hline_at(20, 4, 10, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     hline_at(30, 4, 10, 219, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     hline_at(40, 4, 10, 219, make_attr(COLOR_GREEN, COLOR_BLACK));
    //     hline_at(50, 4, 10, 219, make_attr(COLOR_BLUE, COLOR_BLACK));
    //     hline_at(60, 4, 7, 219, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     char_at(10, 4, 176, make_attr(COLOR_RED, COLOR_BLACK));
    //     char_at(11, 4, 177, make_attr(COLOR_RED, COLOR_BLACK));
    //     char_at(12, 4, 178, make_attr(COLOR_RED, COLOR_BLACK));
    //     char_at(67, 4, 178, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     char_at(68, 4, 177, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     char_at(69, 4, 176, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     hline_at(13, 12, 7, 219, make_attr(COLOR_RED, COLOR_BLACK));
    //     hline_at(20, 12, 10, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     hline_at(30, 12, 10, 219, make_attr(COLOR_YELLOW, COLOR_BLACK));
    //     hline_at(40, 12, 10, 219, make_attr(COLOR_GREEN, COLOR_BLACK));
    //     hline_at(50, 12, 10, 219, make_attr(COLOR_BLUE, COLOR_BLACK));
    //     hline_at(60, 12, 7, 219, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     char_at(10, 12, 176, make_attr(COLOR_RED, COLOR_BLACK));
    //     char_at(11, 12, 177, make_attr(COLOR_RED, COLOR_BLACK));
    //     char_at(12, 12, 178, make_attr(COLOR_RED, COLOR_BLACK));
    //     char_at(67, 12, 178, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     char_at(68, 12, 177, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     char_at(69, 12, 176, make_attr(COLOR_MAGENTA, COLOR_BLACK));
    //     // DAMPBN text
    //     // D
    //     vline_at(9, 6, 5, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(10, 6, 5, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     hline_at(11, 6, 3, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     hline_at(11, 10, 3, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(14, 7, 3, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(15, 7, 3, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));        
    //     // A
    //     vline_at(19, 7, 4, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(20, 7, 4, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));    
    //     vline_at(25, 7, 4, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(26, 7, 4, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));    
    //     hline_at(21, 6, 4, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     hline_at(21, 8, 5, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     // M
    //     vline_at(29, 6, 5, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(30, 6, 5, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(37, 6, 5, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     vline_at(38, 6, 5, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     char_at(31, 7, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));
    //     char_at(32, 7, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));      
    //     char_at(33, 8, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));   
    //     char_at(34, 8, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));   
    //     char_at(35, 7, 177, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));   
    //     char_at(36, 7, 219, make_attr(COLOR_LIGHT_RED, COLOR_BLACK));     
    //     // P
    //     vline_at(41, 6, 5, 177, make_attr(COLOR_RED, COLOR_BLACK));  
    //     vline_at(42, 6, 5, 219, make_attr(COLOR_RED, COLOR_BLACK));          
    //     hline_at(43, 6, 4, 219, make_attr(COLOR_RED, COLOR_BLACK));  
    //     hline_at(43, 8, 4, 219, make_attr(COLOR_RED, COLOR_BLACK));          
    //     char_at(47, 7, 177, make_attr(COLOR_RED, COLOR_BLACK));   
    //     char_at(48, 7, 219, make_attr(COLOR_RED, COLOR_BLACK)); 
    //     // B
    //     vline_at(51, 6, 5, 177, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));  
    //     vline_at(52, 6, 5, 219, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));  
    //     hline_at(53, 6, 4, 219, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));  
    //     hline_at(53, 8, 4, 219, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));  
    //     hline_at(53, 10, 4, 219, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));
    //     char_at(57, 7, 177, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));   
    //     char_at(58, 7, 219, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK)); 
    //     char_at(57, 9, 177, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));   
    //     char_at(58, 9, 219, make_attr(COLOR_LIGHT_GREEN, COLOR_BLACK));                   
    //     // N
    //     vline_at(61, 6, 5, 177, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK));  
    //     vline_at(62, 6, 5, 219, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 
    //     vline_at(69, 6, 5, 177, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK));  
    //     vline_at(70, 6, 5, 219, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK));
    //     char_at(63, 7, 219, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 
    //     char_at(64, 7, 219, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 
    //     char_at(65, 8, 177, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 
    //     char_at(66, 8, 219, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 
    //     char_at(67, 9, 177, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 
    //     char_at(68, 9, 219, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 
    //     char_at(69, 9, 219, make_attr(COLOR_LIGHT_BLUE, COLOR_BLACK)); 

    //     // Dump the contents of the screen to the console
    //     printf("static char title_screen[4000] = {\n\t");
    //     for(i=0; i< 4000; i++) {
    //         printf("0x%0.2x, ", screen[i]);
    //         if (i % 32 == 0 && i != 0) {
    //             printf("\n\t");
    //         }
    //     } 
    //     printf("};\n");
    // g_globals.render.title = 0;
//}